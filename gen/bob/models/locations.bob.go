// Code generated by BobGen sql v0.40.2. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"fmt"
	"io"
	"time"

	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/sqlite"
	"github.com/stephenafamo/bob/dialect/sqlite/dialect"
	"github.com/stephenafamo/bob/dialect/sqlite/dm"
	"github.com/stephenafamo/bob/dialect/sqlite/sm"
	"github.com/stephenafamo/bob/dialect/sqlite/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
)

// Location is an object representing the database table.
type Location struct {
	ID        int64               `db:"id,pk" `
	PublicID  string              `db:"public_id" `
	CreatedAt time.Time           `db:"created_at" `
	UpdatedAt null.Val[time.Time] `db:"updated_at" `
	DeletedAt null.Val[time.Time] `db:"deleted_at" `
	Version   int32               `db:"version" `

	R locationR `db:"-" `
}

// LocationSlice is an alias for a slice of pointers to Location.
// This should almost always be used instead of []*Location.
type LocationSlice []*Location

// Locations contains methods to work with the locations table
var Locations = sqlite.NewTablex[*Location, LocationSlice, *LocationSetter]("", "locations", buildLocationColumns("locations"))

// LocationsQuery is a query on the locations table
type LocationsQuery = *sqlite.ViewQuery[*Location, LocationSlice]

// locationR is where relationships are stored.
type locationR struct {
	LocationVersions LocationVersionSlice // fk_location_versions_0
	LocationVersion  *LocationVersion     // locations_primary_version
}

func buildLocationColumns(alias string) locationColumns {
	return locationColumns{
		ColumnsExpr: expr.NewColumnsExpr(
			"id", "public_id", "created_at", "updated_at", "deleted_at", "version",
		).WithParent("locations"),
		tableAlias: alias,
		ID:         sqlite.Quote(alias, "id"),
		PublicID:   sqlite.Quote(alias, "public_id"),
		CreatedAt:  sqlite.Quote(alias, "created_at"),
		UpdatedAt:  sqlite.Quote(alias, "updated_at"),
		DeletedAt:  sqlite.Quote(alias, "deleted_at"),
		Version:    sqlite.Quote(alias, "version"),
	}
}

type locationColumns struct {
	expr.ColumnsExpr
	tableAlias string
	ID         sqlite.Expression
	PublicID   sqlite.Expression
	CreatedAt  sqlite.Expression
	UpdatedAt  sqlite.Expression
	DeletedAt  sqlite.Expression
	Version    sqlite.Expression
}

func (c locationColumns) Alias() string {
	return c.tableAlias
}

func (locationColumns) AliasedAs(alias string) locationColumns {
	return buildLocationColumns(alias)
}

// LocationSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type LocationSetter struct {
	ID        omit.Val[int64]         `db:"id,pk" `
	PublicID  omit.Val[string]        `db:"public_id" `
	CreatedAt omit.Val[time.Time]     `db:"created_at" `
	UpdatedAt omitnull.Val[time.Time] `db:"updated_at" `
	DeletedAt omitnull.Val[time.Time] `db:"deleted_at" `
	Version   omit.Val[int32]         `db:"version" `
}

func (s LocationSetter) SetColumns() []string {
	vals := make([]string, 0, 6)
	if s.ID.IsValue() {
		vals = append(vals, "id")
	}
	if s.PublicID.IsValue() {
		vals = append(vals, "public_id")
	}
	if s.CreatedAt.IsValue() {
		vals = append(vals, "created_at")
	}
	if !s.UpdatedAt.IsUnset() {
		vals = append(vals, "updated_at")
	}
	if !s.DeletedAt.IsUnset() {
		vals = append(vals, "deleted_at")
	}
	if s.Version.IsValue() {
		vals = append(vals, "version")
	}
	return vals
}

func (s LocationSetter) Overwrite(t *Location) {
	if s.ID.IsValue() {
		t.ID = s.ID.MustGet()
	}
	if s.PublicID.IsValue() {
		t.PublicID = s.PublicID.MustGet()
	}
	if s.CreatedAt.IsValue() {
		t.CreatedAt = s.CreatedAt.MustGet()
	}
	if !s.UpdatedAt.IsUnset() {
		t.UpdatedAt = s.UpdatedAt.MustGetNull()
	}
	if !s.DeletedAt.IsUnset() {
		t.DeletedAt = s.DeletedAt.MustGetNull()
	}
	if s.Version.IsValue() {
		t.Version = s.Version.MustGet()
	}
}

func (s *LocationSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return Locations.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	if len(q.TableRef.Columns) == 0 {
		q.TableRef.Columns = s.SetColumns()
		if len(q.TableRef.Columns) == 0 {
			q.TableRef.Columns = []string{"id"}
		}

	}

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 0, 6)
		if s.ID.IsValue() {
			vals = append(vals, sqlite.Arg(s.ID.MustGet()))
		}

		if s.PublicID.IsValue() {
			vals = append(vals, sqlite.Arg(s.PublicID.MustGet()))
		}

		if s.CreatedAt.IsValue() {
			vals = append(vals, sqlite.Arg(s.CreatedAt.MustGet()))
		}

		if !s.UpdatedAt.IsUnset() {
			vals = append(vals, sqlite.Arg(s.UpdatedAt.MustGetNull()))
		}

		if !s.DeletedAt.IsUnset() {
			vals = append(vals, sqlite.Arg(s.DeletedAt.MustGetNull()))
		}

		if s.Version.IsValue() {
			vals = append(vals, sqlite.Arg(s.Version.MustGet()))
		}

		if len(vals) == 0 {
			vals = append(vals, sqlite.Arg(nil))
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s LocationSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s LocationSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 6)

	if s.ID.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "id")...),
			sqlite.Arg(s.ID),
		}})
	}

	if s.PublicID.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "public_id")...),
			sqlite.Arg(s.PublicID),
		}})
	}

	if s.CreatedAt.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "created_at")...),
			sqlite.Arg(s.CreatedAt),
		}})
	}

	if !s.UpdatedAt.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "updated_at")...),
			sqlite.Arg(s.UpdatedAt),
		}})
	}

	if !s.DeletedAt.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "deleted_at")...),
			sqlite.Arg(s.DeletedAt),
		}})
	}

	if s.Version.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "version")...),
			sqlite.Arg(s.Version),
		}})
	}

	return exprs
}

// FindLocation retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindLocation(ctx context.Context, exec bob.Executor, IDPK int64, cols ...string) (*Location, error) {
	if len(cols) == 0 {
		return Locations.Query(
			sm.Where(Locations.Columns.ID.EQ(sqlite.Arg(IDPK))),
		).One(ctx, exec)
	}

	return Locations.Query(
		sm.Where(Locations.Columns.ID.EQ(sqlite.Arg(IDPK))),
		sm.Columns(Locations.Columns.Only(cols...)),
	).One(ctx, exec)
}

// LocationExists checks the presence of a single record by primary key
func LocationExists(ctx context.Context, exec bob.Executor, IDPK int64) (bool, error) {
	return Locations.Query(
		sm.Where(Locations.Columns.ID.EQ(sqlite.Arg(IDPK))),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after Location is retrieved from the database
func (o *Location) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = Locations.AfterSelectHooks.RunHooks(ctx, exec, LocationSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = Locations.AfterInsertHooks.RunHooks(ctx, exec, LocationSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = Locations.AfterUpdateHooks.RunHooks(ctx, exec, LocationSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = Locations.AfterDeleteHooks.RunHooks(ctx, exec, LocationSlice{o})
	}

	return err
}

// primaryKeyVals returns the primary key values of the Location
func (o *Location) primaryKeyVals() bob.Expression {
	return sqlite.Arg(o.ID)
}

func (o *Location) pkEQ() dialect.Expression {
	return sqlite.Quote("locations", "id").EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.primaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the Location
func (o *Location) Update(ctx context.Context, exec bob.Executor, s *LocationSetter) error {
	v, err := Locations.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	o.R = v.R
	*o = *v

	return nil
}

// Delete deletes a single Location record with an executor
func (o *Location) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := Locations.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the Location using the executor
func (o *Location) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := Locations.Query(
		sm.Where(Locations.Columns.ID.EQ(sqlite.Arg(o.ID))),
	).One(ctx, exec)
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

// AfterQueryHook is called after LocationSlice is retrieved from the database
func (o LocationSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = Locations.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = Locations.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = Locations.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = Locations.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o LocationSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return sqlite.Raw("NULL")
	}

	return sqlite.Quote("locations", "id").In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.primaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o LocationSlice) copyMatchingRows(from ...*Location) {
	for i, old := range o {
		for _, new := range from {
			if new.ID != old.ID {
				continue
			}
			new.R = old.R
			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o LocationSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return Locations.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *Location:
				o.copyMatchingRows(retrieved)
			case []*Location:
				o.copyMatchingRows(retrieved...)
			case LocationSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a Location or a slice of Location
				// then run the AfterUpdateHooks on the slice
				_, err = Locations.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o LocationSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return Locations.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *Location:
				o.copyMatchingRows(retrieved)
			case []*Location:
				o.copyMatchingRows(retrieved...)
			case LocationSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a Location or a slice of Location
				// then run the AfterDeleteHooks on the slice
				_, err = Locations.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o LocationSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals LocationSetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := Locations.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o LocationSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := Locations.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o LocationSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := Locations.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

// LocationVersions starts a query for related objects on location_versions
func (o *Location) LocationVersions(mods ...bob.Mod[*dialect.SelectQuery]) LocationVersionsQuery {
	return LocationVersions.Query(append(mods,
		sm.Where(LocationVersions.Columns.LocationID.EQ(sqlite.Arg(o.ID))),
	)...)
}

func (os LocationSlice) LocationVersions(mods ...bob.Mod[*dialect.SelectQuery]) LocationVersionsQuery {
	PKArgSlice := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgSlice[i] = sqlite.ArgGroup(o.ID)
	}
	PKArgExpr := sqlite.Group(PKArgSlice...)

	return LocationVersions.Query(append(mods,
		sm.Where(sqlite.Group(LocationVersions.Columns.LocationID).OP("IN", PKArgExpr)),
	)...)
}

// LocationVersion starts a query for related objects on location_versions
func (o *Location) LocationVersion(mods ...bob.Mod[*dialect.SelectQuery]) LocationVersionsQuery {
	return LocationVersions.Query(append(mods)...)
}

func (os LocationSlice) LocationVersion(mods ...bob.Mod[*dialect.SelectQuery]) LocationVersionsQuery {
	return LocationVersions.Query(append(mods)...)
}

func insertLocationLocationVersions0(ctx context.Context, exec bob.Executor, locationVersions1 []*LocationVersionSetter, location0 *Location) (LocationVersionSlice, error) {
	for i := range locationVersions1 {
		locationVersions1[i].LocationID = omit.From(location0.ID)
	}

	ret, err := LocationVersions.Insert(bob.ToMods(locationVersions1...)).All(ctx, exec)
	if err != nil {
		return ret, fmt.Errorf("insertLocationLocationVersions0: %w", err)
	}

	return ret, nil
}

func attachLocationLocationVersions0(ctx context.Context, exec bob.Executor, count int, locationVersions1 LocationVersionSlice, location0 *Location) (LocationVersionSlice, error) {
	setter := &LocationVersionSetter{
		LocationID: omit.From(location0.ID),
	}

	err := locationVersions1.UpdateAll(ctx, exec, *setter)
	if err != nil {
		return nil, fmt.Errorf("attachLocationLocationVersions0: %w", err)
	}

	return locationVersions1, nil
}

func (location0 *Location) InsertLocationVersions(ctx context.Context, exec bob.Executor, related ...*LocationVersionSetter) error {
	if len(related) == 0 {
		return nil
	}

	var err error

	locationVersions1, err := insertLocationLocationVersions0(ctx, exec, related, location0)
	if err != nil {
		return err
	}

	location0.R.LocationVersions = append(location0.R.LocationVersions, locationVersions1...)

	for _, rel := range locationVersions1 {
		rel.R.Location = location0
	}
	return nil
}

func (location0 *Location) AttachLocationVersions(ctx context.Context, exec bob.Executor, related ...*LocationVersion) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	locationVersions1 := LocationVersionSlice(related)

	_, err = attachLocationLocationVersions0(ctx, exec, len(related), locationVersions1, location0)
	if err != nil {
		return err
	}

	location0.R.LocationVersions = append(location0.R.LocationVersions, locationVersions1...)

	for _, rel := range related {
		rel.R.Location = location0
	}

	return nil
}

func (location0 *Location) InsertLocationVersion(ctx context.Context, exec bob.Executor, related *LocationVersionSetter) error {
	locationVersion1, err := LocationVersions.Insert(related).One(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	location0.R.LocationVersion = locationVersion1

	locationVersion1.R.Locations = append(locationVersion1.R.Locations, location0)

	return nil
}

func (location0 *Location) AttachLocationVersion(ctx context.Context, exec bob.Executor, locationVersion1 *LocationVersion) error {
	var err error

	location0.R.LocationVersion = locationVersion1

	locationVersion1.R.Locations = append(locationVersion1.R.Locations, location0)

	return nil
}

type locationWhere[Q sqlite.Filterable] struct {
	ID        sqlite.WhereMod[Q, int64]
	PublicID  sqlite.WhereMod[Q, string]
	CreatedAt sqlite.WhereMod[Q, time.Time]
	UpdatedAt sqlite.WhereNullMod[Q, time.Time]
	DeletedAt sqlite.WhereNullMod[Q, time.Time]
	Version   sqlite.WhereMod[Q, int32]
}

func (locationWhere[Q]) AliasedAs(alias string) locationWhere[Q] {
	return buildLocationWhere[Q](buildLocationColumns(alias))
}

func buildLocationWhere[Q sqlite.Filterable](cols locationColumns) locationWhere[Q] {
	return locationWhere[Q]{
		ID:        sqlite.Where[Q, int64](cols.ID),
		PublicID:  sqlite.Where[Q, string](cols.PublicID),
		CreatedAt: sqlite.Where[Q, time.Time](cols.CreatedAt),
		UpdatedAt: sqlite.WhereNull[Q, time.Time](cols.UpdatedAt),
		DeletedAt: sqlite.WhereNull[Q, time.Time](cols.DeletedAt),
		Version:   sqlite.Where[Q, int32](cols.Version),
	}
}

func (o *Location) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "LocationVersions":
		rels, ok := retrieved.(LocationVersionSlice)
		if !ok {
			return fmt.Errorf("location cannot load %T as %q", retrieved, name)
		}

		o.R.LocationVersions = rels

		for _, rel := range rels {
			if rel != nil {
				rel.R.Location = o
			}
		}
		return nil
	case "LocationVersion":
		rel, ok := retrieved.(*LocationVersion)
		if !ok {
			return fmt.Errorf("location cannot load %T as %q", retrieved, name)
		}

		o.R.LocationVersion = rel

		if rel != nil {
			rel.R.Locations = LocationSlice{o}
		}
		return nil
	default:
		return fmt.Errorf("location has no relationship %q", name)
	}
}

type locationPreloader struct {
	LocationVersion func(...sqlite.PreloadOption) sqlite.Preloader
}

func buildLocationPreloader() locationPreloader {
	return locationPreloader{
		LocationVersion: func(opts ...sqlite.PreloadOption) sqlite.Preloader {
			return sqlite.Preload[*LocationVersion, LocationVersionSlice](sqlite.PreloadRel{
				Name: "LocationVersion",
				Sides: []sqlite.PreloadSide{
					{
						From: Locations,
						To:   LocationVersions,
					},
				},
			}, LocationVersions.Columns.Names(), opts...)
		},
	}
}

type locationThenLoader[Q orm.Loadable] struct {
	LocationVersions func(...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q]
	LocationVersion  func(...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q]
}

func buildLocationThenLoader[Q orm.Loadable]() locationThenLoader[Q] {
	type LocationVersionsLoadInterface interface {
		LoadLocationVersions(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
	}
	type LocationVersionLoadInterface interface {
		LoadLocationVersion(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
	}

	return locationThenLoader[Q]{
		LocationVersions: thenLoadBuilder[Q](
			"LocationVersions",
			func(ctx context.Context, exec bob.Executor, retrieved LocationVersionsLoadInterface, mods ...bob.Mod[*dialect.SelectQuery]) error {
				return retrieved.LoadLocationVersions(ctx, exec, mods...)
			},
		),
		LocationVersion: thenLoadBuilder[Q](
			"LocationVersion",
			func(ctx context.Context, exec bob.Executor, retrieved LocationVersionLoadInterface, mods ...bob.Mod[*dialect.SelectQuery]) error {
				return retrieved.LoadLocationVersion(ctx, exec, mods...)
			},
		),
	}
}

// LoadLocationVersions loads the location's LocationVersions into the .R struct
func (o *Location) LoadLocationVersions(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.LocationVersions = nil

	related, err := o.LocationVersions(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, rel := range related {
		rel.R.Location = o
	}

	o.R.LocationVersions = related
	return nil
}

// LoadLocationVersions loads the location's LocationVersions into the .R struct
func (os LocationSlice) LoadLocationVersions(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	locationVersions, err := os.LocationVersions(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		if o == nil {
			continue
		}

		o.R.LocationVersions = nil
	}

	for _, o := range os {
		if o == nil {
			continue
		}

		for _, rel := range locationVersions {

			if !(o.ID == rel.LocationID) {
				continue
			}

			rel.R.Location = o

			o.R.LocationVersions = append(o.R.LocationVersions, rel)
		}
	}

	return nil
}

// LoadLocationVersion loads the location's LocationVersion into the .R struct
func (o *Location) LoadLocationVersion(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.LocationVersion = nil

	related, err := o.LocationVersion(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	related.R.Locations = LocationSlice{o}

	o.R.LocationVersion = related
	return nil
}

// LoadLocationVersion loads the location's LocationVersion into the .R struct
func (os LocationSlice) LoadLocationVersion(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	locationVersions, err := os.LocationVersion(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		if o == nil {
			continue
		}

		for _, rel := range locationVersions {

			rel.R.Locations = append(rel.R.Locations, o)

			o.R.LocationVersion = rel
			break
		}
	}

	return nil
}

type locationJoins[Q dialect.Joinable] struct {
	typ              string
	LocationVersions modAs[Q, locationVersionColumns]
	LocationVersion  modAs[Q, locationVersionColumns]
}

func (j locationJoins[Q]) aliasedAs(alias string) locationJoins[Q] {
	return buildLocationJoins[Q](buildLocationColumns(alias), j.typ)
}

func buildLocationJoins[Q dialect.Joinable](cols locationColumns, typ string) locationJoins[Q] {
	return locationJoins[Q]{
		typ: typ,
		LocationVersions: modAs[Q, locationVersionColumns]{
			c: LocationVersions.Columns,
			f: func(to locationVersionColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, LocationVersions.Name().As(to.Alias())).On(
						to.LocationID.EQ(cols.ID),
					))
				}

				return mods
			},
		},
		LocationVersion: modAs[Q, locationVersionColumns]{
			c: LocationVersions.Columns,
			f: func(to locationVersionColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, LocationVersions.Name().As(to.Alias())).On())
				}

				return mods
			},
		},
	}
}
