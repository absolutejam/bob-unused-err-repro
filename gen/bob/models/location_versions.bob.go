// Code generated by BobGen sql v0.40.2. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"fmt"
	"io"
	"time"

	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/sqlite"
	"github.com/stephenafamo/bob/dialect/sqlite/dialect"
	"github.com/stephenafamo/bob/dialect/sqlite/dm"
	"github.com/stephenafamo/bob/dialect/sqlite/sm"
	"github.com/stephenafamo/bob/dialect/sqlite/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
)

// LocationVersion is an object representing the database table.
type LocationVersion struct {
	ID               int64               `db:"id,pk" `
	PublicID         string              `db:"public_id" `
	IsPrimaryVersion bool                `db:"is_primary_version" `
	LocationID       int64               `db:"location_id" `
	Name             string              `db:"name" `
	Description      null.Val[string]    `db:"description" `
	Picture          null.Val[string]    `db:"picture" `
	CreatedAt        time.Time           `db:"created_at" `
	UpdatedAt        null.Val[time.Time] `db:"updated_at" `
	DeletedAt        null.Val[time.Time] `db:"deleted_at" `
	Version          int32               `db:"version" `

	R locationVersionR `db:"-" `
}

// LocationVersionSlice is an alias for a slice of pointers to LocationVersion.
// This should almost always be used instead of []*LocationVersion.
type LocationVersionSlice []*LocationVersion

// LocationVersions contains methods to work with the location_versions table
var LocationVersions = sqlite.NewTablex[*LocationVersion, LocationVersionSlice, *LocationVersionSetter]("", "location_versions", buildLocationVersionColumns("location_versions"))

// LocationVersionsQuery is a query on the location_versions table
type LocationVersionsQuery = *sqlite.ViewQuery[*LocationVersion, LocationVersionSlice]

// locationVersionR is where relationships are stored.
type locationVersionR struct {
	Location       *Location // fk_location_versions_0
	PrimaryVersion *Location // locations_primary_version
}

func buildLocationVersionColumns(alias string) locationVersionColumns {
	return locationVersionColumns{
		ColumnsExpr: expr.NewColumnsExpr(
			"id", "public_id", "is_primary_version", "location_id", "name", "description", "picture", "created_at", "updated_at", "deleted_at", "version",
		).WithParent("location_versions"),
		tableAlias:       alias,
		ID:               sqlite.Quote(alias, "id"),
		PublicID:         sqlite.Quote(alias, "public_id"),
		IsPrimaryVersion: sqlite.Quote(alias, "is_primary_version"),
		LocationID:       sqlite.Quote(alias, "location_id"),
		Name:             sqlite.Quote(alias, "name"),
		Description:      sqlite.Quote(alias, "description"),
		Picture:          sqlite.Quote(alias, "picture"),
		CreatedAt:        sqlite.Quote(alias, "created_at"),
		UpdatedAt:        sqlite.Quote(alias, "updated_at"),
		DeletedAt:        sqlite.Quote(alias, "deleted_at"),
		Version:          sqlite.Quote(alias, "version"),
	}
}

type locationVersionColumns struct {
	expr.ColumnsExpr
	tableAlias       string
	ID               sqlite.Expression
	PublicID         sqlite.Expression
	IsPrimaryVersion sqlite.Expression
	LocationID       sqlite.Expression
	Name             sqlite.Expression
	Description      sqlite.Expression
	Picture          sqlite.Expression
	CreatedAt        sqlite.Expression
	UpdatedAt        sqlite.Expression
	DeletedAt        sqlite.Expression
	Version          sqlite.Expression
}

func (c locationVersionColumns) Alias() string {
	return c.tableAlias
}

func (locationVersionColumns) AliasedAs(alias string) locationVersionColumns {
	return buildLocationVersionColumns(alias)
}

// LocationVersionSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type LocationVersionSetter struct {
	ID               omit.Val[int64]         `db:"id,pk" `
	PublicID         omit.Val[string]        `db:"public_id" `
	IsPrimaryVersion omit.Val[bool]          `db:"is_primary_version" `
	LocationID       omit.Val[int64]         `db:"location_id" `
	Name             omit.Val[string]        `db:"name" `
	Description      omitnull.Val[string]    `db:"description" `
	Picture          omitnull.Val[string]    `db:"picture" `
	CreatedAt        omit.Val[time.Time]     `db:"created_at" `
	UpdatedAt        omitnull.Val[time.Time] `db:"updated_at" `
	DeletedAt        omitnull.Val[time.Time] `db:"deleted_at" `
	Version          omit.Val[int32]         `db:"version" `
}

func (s LocationVersionSetter) SetColumns() []string {
	vals := make([]string, 0, 11)
	if s.ID.IsValue() {
		vals = append(vals, "id")
	}
	if s.PublicID.IsValue() {
		vals = append(vals, "public_id")
	}
	if s.IsPrimaryVersion.IsValue() {
		vals = append(vals, "is_primary_version")
	}
	if s.LocationID.IsValue() {
		vals = append(vals, "location_id")
	}
	if s.Name.IsValue() {
		vals = append(vals, "name")
	}
	if !s.Description.IsUnset() {
		vals = append(vals, "description")
	}
	if !s.Picture.IsUnset() {
		vals = append(vals, "picture")
	}
	if s.CreatedAt.IsValue() {
		vals = append(vals, "created_at")
	}
	if !s.UpdatedAt.IsUnset() {
		vals = append(vals, "updated_at")
	}
	if !s.DeletedAt.IsUnset() {
		vals = append(vals, "deleted_at")
	}
	if s.Version.IsValue() {
		vals = append(vals, "version")
	}
	return vals
}

func (s LocationVersionSetter) Overwrite(t *LocationVersion) {
	if s.ID.IsValue() {
		t.ID = s.ID.MustGet()
	}
	if s.PublicID.IsValue() {
		t.PublicID = s.PublicID.MustGet()
	}
	if s.IsPrimaryVersion.IsValue() {
		t.IsPrimaryVersion = s.IsPrimaryVersion.MustGet()
	}
	if s.LocationID.IsValue() {
		t.LocationID = s.LocationID.MustGet()
	}
	if s.Name.IsValue() {
		t.Name = s.Name.MustGet()
	}
	if !s.Description.IsUnset() {
		t.Description = s.Description.MustGetNull()
	}
	if !s.Picture.IsUnset() {
		t.Picture = s.Picture.MustGetNull()
	}
	if s.CreatedAt.IsValue() {
		t.CreatedAt = s.CreatedAt.MustGet()
	}
	if !s.UpdatedAt.IsUnset() {
		t.UpdatedAt = s.UpdatedAt.MustGetNull()
	}
	if !s.DeletedAt.IsUnset() {
		t.DeletedAt = s.DeletedAt.MustGetNull()
	}
	if s.Version.IsValue() {
		t.Version = s.Version.MustGet()
	}
}

func (s *LocationVersionSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return LocationVersions.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	if len(q.TableRef.Columns) == 0 {
		q.TableRef.Columns = s.SetColumns()
		if len(q.TableRef.Columns) == 0 {
			q.TableRef.Columns = []string{"id"}
		}

	}

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 0, 11)
		if s.ID.IsValue() {
			vals = append(vals, sqlite.Arg(s.ID.MustGet()))
		}

		if s.PublicID.IsValue() {
			vals = append(vals, sqlite.Arg(s.PublicID.MustGet()))
		}

		if s.IsPrimaryVersion.IsValue() {
			vals = append(vals, sqlite.Arg(s.IsPrimaryVersion.MustGet()))
		}

		if s.LocationID.IsValue() {
			vals = append(vals, sqlite.Arg(s.LocationID.MustGet()))
		}

		if s.Name.IsValue() {
			vals = append(vals, sqlite.Arg(s.Name.MustGet()))
		}

		if !s.Description.IsUnset() {
			vals = append(vals, sqlite.Arg(s.Description.MustGetNull()))
		}

		if !s.Picture.IsUnset() {
			vals = append(vals, sqlite.Arg(s.Picture.MustGetNull()))
		}

		if s.CreatedAt.IsValue() {
			vals = append(vals, sqlite.Arg(s.CreatedAt.MustGet()))
		}

		if !s.UpdatedAt.IsUnset() {
			vals = append(vals, sqlite.Arg(s.UpdatedAt.MustGetNull()))
		}

		if !s.DeletedAt.IsUnset() {
			vals = append(vals, sqlite.Arg(s.DeletedAt.MustGetNull()))
		}

		if s.Version.IsValue() {
			vals = append(vals, sqlite.Arg(s.Version.MustGet()))
		}

		if len(vals) == 0 {
			vals = append(vals, sqlite.Arg(nil))
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s LocationVersionSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s LocationVersionSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 11)

	if s.ID.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "id")...),
			sqlite.Arg(s.ID),
		}})
	}

	if s.PublicID.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "public_id")...),
			sqlite.Arg(s.PublicID),
		}})
	}

	if s.IsPrimaryVersion.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "is_primary_version")...),
			sqlite.Arg(s.IsPrimaryVersion),
		}})
	}

	if s.LocationID.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "location_id")...),
			sqlite.Arg(s.LocationID),
		}})
	}

	if s.Name.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "name")...),
			sqlite.Arg(s.Name),
		}})
	}

	if !s.Description.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "description")...),
			sqlite.Arg(s.Description),
		}})
	}

	if !s.Picture.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "picture")...),
			sqlite.Arg(s.Picture),
		}})
	}

	if s.CreatedAt.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "created_at")...),
			sqlite.Arg(s.CreatedAt),
		}})
	}

	if !s.UpdatedAt.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "updated_at")...),
			sqlite.Arg(s.UpdatedAt),
		}})
	}

	if !s.DeletedAt.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "deleted_at")...),
			sqlite.Arg(s.DeletedAt),
		}})
	}

	if s.Version.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "version")...),
			sqlite.Arg(s.Version),
		}})
	}

	return exprs
}

// FindLocationVersion retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindLocationVersion(ctx context.Context, exec bob.Executor, IDPK int64, cols ...string) (*LocationVersion, error) {
	if len(cols) == 0 {
		return LocationVersions.Query(
			sm.Where(LocationVersions.Columns.ID.EQ(sqlite.Arg(IDPK))),
		).One(ctx, exec)
	}

	return LocationVersions.Query(
		sm.Where(LocationVersions.Columns.ID.EQ(sqlite.Arg(IDPK))),
		sm.Columns(LocationVersions.Columns.Only(cols...)),
	).One(ctx, exec)
}

// LocationVersionExists checks the presence of a single record by primary key
func LocationVersionExists(ctx context.Context, exec bob.Executor, IDPK int64) (bool, error) {
	return LocationVersions.Query(
		sm.Where(LocationVersions.Columns.ID.EQ(sqlite.Arg(IDPK))),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after LocationVersion is retrieved from the database
func (o *LocationVersion) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = LocationVersions.AfterSelectHooks.RunHooks(ctx, exec, LocationVersionSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = LocationVersions.AfterInsertHooks.RunHooks(ctx, exec, LocationVersionSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = LocationVersions.AfterUpdateHooks.RunHooks(ctx, exec, LocationVersionSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = LocationVersions.AfterDeleteHooks.RunHooks(ctx, exec, LocationVersionSlice{o})
	}

	return err
}

// primaryKeyVals returns the primary key values of the LocationVersion
func (o *LocationVersion) primaryKeyVals() bob.Expression {
	return sqlite.Arg(o.ID)
}

func (o *LocationVersion) pkEQ() dialect.Expression {
	return sqlite.Quote("location_versions", "id").EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.primaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the LocationVersion
func (o *LocationVersion) Update(ctx context.Context, exec bob.Executor, s *LocationVersionSetter) error {
	v, err := LocationVersions.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	o.R = v.R
	*o = *v

	return nil
}

// Delete deletes a single LocationVersion record with an executor
func (o *LocationVersion) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := LocationVersions.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the LocationVersion using the executor
func (o *LocationVersion) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := LocationVersions.Query(
		sm.Where(LocationVersions.Columns.ID.EQ(sqlite.Arg(o.ID))),
	).One(ctx, exec)
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

// AfterQueryHook is called after LocationVersionSlice is retrieved from the database
func (o LocationVersionSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = LocationVersions.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = LocationVersions.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = LocationVersions.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = LocationVersions.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o LocationVersionSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return sqlite.Raw("NULL")
	}

	return sqlite.Quote("location_versions", "id").In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.primaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o LocationVersionSlice) copyMatchingRows(from ...*LocationVersion) {
	for i, old := range o {
		for _, new := range from {
			if new.ID != old.ID {
				continue
			}
			new.R = old.R
			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o LocationVersionSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return LocationVersions.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *LocationVersion:
				o.copyMatchingRows(retrieved)
			case []*LocationVersion:
				o.copyMatchingRows(retrieved...)
			case LocationVersionSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a LocationVersion or a slice of LocationVersion
				// then run the AfterUpdateHooks on the slice
				_, err = LocationVersions.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o LocationVersionSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return LocationVersions.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *LocationVersion:
				o.copyMatchingRows(retrieved)
			case []*LocationVersion:
				o.copyMatchingRows(retrieved...)
			case LocationVersionSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a LocationVersion or a slice of LocationVersion
				// then run the AfterDeleteHooks on the slice
				_, err = LocationVersions.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o LocationVersionSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals LocationVersionSetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := LocationVersions.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o LocationVersionSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := LocationVersions.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o LocationVersionSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := LocationVersions.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

// Location starts a query for related objects on locations
func (o *LocationVersion) Location(mods ...bob.Mod[*dialect.SelectQuery]) LocationsQuery {
	return Locations.Query(append(mods,
		sm.Where(Locations.Columns.ID.EQ(sqlite.Arg(o.LocationID))),
	)...)
}

func (os LocationVersionSlice) Location(mods ...bob.Mod[*dialect.SelectQuery]) LocationsQuery {
	PKArgSlice := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgSlice[i] = sqlite.ArgGroup(o.LocationID)
	}
	PKArgExpr := sqlite.Group(PKArgSlice...)

	return Locations.Query(append(mods,
		sm.Where(sqlite.Group(Locations.Columns.ID).OP("IN", PKArgExpr)),
	)...)
}

// PrimaryVersion starts a query for related objects on locations
func (o *LocationVersion) PrimaryVersion(mods ...bob.Mod[*dialect.SelectQuery]) LocationsQuery {
	return Locations.Query(append(mods,
		sm.Where(Locations.Columns.ID.EQ(sqlite.Arg(o.LocationID))),
		sm.Where(LocationVersions.Columns.IsPrimaryVersion.EQ(sqlite.Arg("`true`"))),
	)...)
}

func (os LocationVersionSlice) PrimaryVersion(mods ...bob.Mod[*dialect.SelectQuery]) LocationsQuery {
	PKArgSlice := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgSlice[i] = sqlite.ArgGroup(o.LocationID)
	}
	PKArgExpr := sqlite.Group(PKArgSlice...)

	return Locations.Query(append(mods,
		sm.Where(sqlite.Group(Locations.Columns.ID).OP("IN", PKArgExpr)),
		sm.Where(LocationVersions.Columns.IsPrimaryVersion.EQ(sqlite.Arg("`true`"))),
	)...)
}

func attachLocationVersionLocation0(ctx context.Context, exec bob.Executor, count int, locationVersion0 *LocationVersion, location1 *Location) (*LocationVersion, error) {
	setter := &LocationVersionSetter{
		LocationID: omit.From(location1.ID),
	}

	err := locationVersion0.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachLocationVersionLocation0: %w", err)
	}

	return locationVersion0, nil
}

func (locationVersion0 *LocationVersion) InsertLocation(ctx context.Context, exec bob.Executor, related *LocationSetter) error {
	location1, err := Locations.Insert(related).One(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachLocationVersionLocation0(ctx, exec, 1, locationVersion0, location1)
	if err != nil {
		return err
	}

	locationVersion0.R.Location = location1

	location1.R.LocationVersions = append(location1.R.LocationVersions, locationVersion0)

	return nil
}

func (locationVersion0 *LocationVersion) AttachLocation(ctx context.Context, exec bob.Executor, location1 *Location) error {
	var err error

	_, err = attachLocationVersionLocation0(ctx, exec, 1, locationVersion0, location1)
	if err != nil {
		return err
	}

	locationVersion0.R.Location = location1

	location1.R.LocationVersions = append(location1.R.LocationVersions, locationVersion0)

	return nil
}

func attachLocationVersionPrimaryVersion0(ctx context.Context, exec bob.Executor, count int, locationVersion0 *LocationVersion) (*LocationVersion, error) {
	setter := &LocationVersionSetter{
		IsPrimaryVersion: &true,
	}

	err := locationVersion0.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachLocationVersionPrimaryVersion0: %w", err)
	}

	return locationVersion0, nil
}

func insertLocationVersionPrimaryVersion1(ctx context.Context, exec bob.Executor, location1 *LocationSetter, locationVersion0 *LocationVersion) (*Location, error) {
	location1.ID = omit.From(locationVersion0.LocationID)

	ret, err := Locations.Insert(location1).One(ctx, exec)
	if err != nil {
		return ret, fmt.Errorf("insertLocationVersionPrimaryVersion1: %w", err)
	}

	return ret, nil
}

func attachLocationVersionPrimaryVersion1(ctx context.Context, exec bob.Executor, count int, location1 *Location, locationVersion0 *LocationVersion) (*Location, error) {
	setter := &LocationSetter{
		ID: omit.From(locationVersion0.LocationID),
	}

	err := location1.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachLocationVersionPrimaryVersion1: %w", err)
	}

	return location1, nil
}

func (locationVersion0 *LocationVersion) InsertPrimaryVersion(ctx context.Context, exec bob.Executor, related *LocationSetter) error {
	locationVersion0, err = attachLocationVersionPrimaryVersion0(ctx, exec, 1, locationVersion0)
	if err != nil {
		return err
	}

	location1, err := insertLocationVersionPrimaryVersion1(ctx, exec, related, locationVersion0)
	if err != nil {
		return err
	}

	locationVersion0.R.PrimaryVersion = location1

	location1.R.LocationVersion = locationVersion0

	return nil
}

func (locationVersion0 *LocationVersion) AttachPrimaryVersion(ctx context.Context, exec bob.Executor, location1 *Location) error {
	var err error

	locationVersion0, err = attachLocationVersionPrimaryVersion0(ctx, exec, 1, locationVersion0)
	if err != nil {
		return err
	}

	_, err = attachLocationVersionPrimaryVersion1(ctx, exec, 1, location1, locationVersion0)
	if err != nil {
		return err
	}

	locationVersion0.R.PrimaryVersion = location1

	location1.R.LocationVersion = locationVersion0

	return nil
}

type locationVersionWhere[Q sqlite.Filterable] struct {
	ID               sqlite.WhereMod[Q, int64]
	PublicID         sqlite.WhereMod[Q, string]
	IsPrimaryVersion sqlite.WhereMod[Q, bool]
	LocationID       sqlite.WhereMod[Q, int64]
	Name             sqlite.WhereMod[Q, string]
	Description      sqlite.WhereNullMod[Q, string]
	Picture          sqlite.WhereNullMod[Q, string]
	CreatedAt        sqlite.WhereMod[Q, time.Time]
	UpdatedAt        sqlite.WhereNullMod[Q, time.Time]
	DeletedAt        sqlite.WhereNullMod[Q, time.Time]
	Version          sqlite.WhereMod[Q, int32]
}

func (locationVersionWhere[Q]) AliasedAs(alias string) locationVersionWhere[Q] {
	return buildLocationVersionWhere[Q](buildLocationVersionColumns(alias))
}

func buildLocationVersionWhere[Q sqlite.Filterable](cols locationVersionColumns) locationVersionWhere[Q] {
	return locationVersionWhere[Q]{
		ID:               sqlite.Where[Q, int64](cols.ID),
		PublicID:         sqlite.Where[Q, string](cols.PublicID),
		IsPrimaryVersion: sqlite.Where[Q, bool](cols.IsPrimaryVersion),
		LocationID:       sqlite.Where[Q, int64](cols.LocationID),
		Name:             sqlite.Where[Q, string](cols.Name),
		Description:      sqlite.WhereNull[Q, string](cols.Description),
		Picture:          sqlite.WhereNull[Q, string](cols.Picture),
		CreatedAt:        sqlite.Where[Q, time.Time](cols.CreatedAt),
		UpdatedAt:        sqlite.WhereNull[Q, time.Time](cols.UpdatedAt),
		DeletedAt:        sqlite.WhereNull[Q, time.Time](cols.DeletedAt),
		Version:          sqlite.Where[Q, int32](cols.Version),
	}
}

func (o *LocationVersion) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "Location":
		rel, ok := retrieved.(*Location)
		if !ok {
			return fmt.Errorf("locationVersion cannot load %T as %q", retrieved, name)
		}

		o.R.Location = rel

		if rel != nil {
			rel.R.LocationVersions = LocationVersionSlice{o}
		}
		return nil
	case "PrimaryVersion":
		rel, ok := retrieved.(*Location)
		if !ok {
			return fmt.Errorf("locationVersion cannot load %T as %q", retrieved, name)
		}

		o.R.PrimaryVersion = rel

		if rel != nil {
			rel.R.LocationVersion = o
		}
		return nil
	default:
		return fmt.Errorf("locationVersion has no relationship %q", name)
	}
}

type locationVersionPreloader struct {
	Location       func(...sqlite.PreloadOption) sqlite.Preloader
	PrimaryVersion func(...sqlite.PreloadOption) sqlite.Preloader
}

func buildLocationVersionPreloader() locationVersionPreloader {
	return locationVersionPreloader{
		Location: func(opts ...sqlite.PreloadOption) sqlite.Preloader {
			return sqlite.Preload[*Location, LocationSlice](sqlite.PreloadRel{
				Name: "Location",
				Sides: []sqlite.PreloadSide{
					{
						From:        LocationVersions,
						To:          Locations,
						FromColumns: []string{"location_id"},
						ToColumns:   []string{"id"},
					},
				},
			}, Locations.Columns.Names(), opts...)
		},
		PrimaryVersion: func(opts ...sqlite.PreloadOption) sqlite.Preloader {
			return sqlite.Preload[*Location, LocationSlice](sqlite.PreloadRel{
				Name: "PrimaryVersion",
				Sides: []sqlite.PreloadSide{
					{
						From:        LocationVersions,
						To:          Locations,
						FromColumns: []string{"location_id"},
						ToColumns:   []string{"id"},
						FromWhere: []orm.RelWhere{
							{
								Column:   ColumnNames.LocationVersions.IsPrimaryVersion,
								SQLValue: "`true`",
								GoValue:  "true",
							},
						},
					},
				},
			}, Locations.Columns.Names(), opts...)
		},
	}
}

type locationVersionThenLoader[Q orm.Loadable] struct {
	Location       func(...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q]
	PrimaryVersion func(...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q]
}

func buildLocationVersionThenLoader[Q orm.Loadable]() locationVersionThenLoader[Q] {
	type LocationLoadInterface interface {
		LoadLocation(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
	}
	type PrimaryVersionLoadInterface interface {
		LoadPrimaryVersion(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
	}

	return locationVersionThenLoader[Q]{
		Location: thenLoadBuilder[Q](
			"Location",
			func(ctx context.Context, exec bob.Executor, retrieved LocationLoadInterface, mods ...bob.Mod[*dialect.SelectQuery]) error {
				return retrieved.LoadLocation(ctx, exec, mods...)
			},
		),
		PrimaryVersion: thenLoadBuilder[Q](
			"PrimaryVersion",
			func(ctx context.Context, exec bob.Executor, retrieved PrimaryVersionLoadInterface, mods ...bob.Mod[*dialect.SelectQuery]) error {
				return retrieved.LoadPrimaryVersion(ctx, exec, mods...)
			},
		),
	}
}

// LoadLocation loads the locationVersion's Location into the .R struct
func (o *LocationVersion) LoadLocation(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.Location = nil

	related, err := o.Location(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	related.R.LocationVersions = LocationVersionSlice{o}

	o.R.Location = related
	return nil
}

// LoadLocation loads the locationVersion's Location into the .R struct
func (os LocationVersionSlice) LoadLocation(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	locations, err := os.Location(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		if o == nil {
			continue
		}

		for _, rel := range locations {

			if !(o.LocationID == rel.ID) {
				continue
			}

			rel.R.LocationVersions = append(rel.R.LocationVersions, o)

			o.R.Location = rel
			break
		}
	}

	return nil
}

// LoadPrimaryVersion loads the locationVersion's PrimaryVersion into the .R struct
func (o *LocationVersion) LoadPrimaryVersion(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.PrimaryVersion = nil

	related, err := o.PrimaryVersion(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	related.R.LocationVersion = o

	o.R.PrimaryVersion = related
	return nil
}

// LoadPrimaryVersion loads the locationVersion's PrimaryVersion into the .R struct
func (os LocationVersionSlice) LoadPrimaryVersion(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	locations, err := os.PrimaryVersion(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		if o == nil {
			continue
		}

		for _, rel := range locations {

			if !(o.LocationID == rel.ID) {
				continue
			}

			rel.R.LocationVersion = o

			o.R.PrimaryVersion = rel
			break
		}
	}

	return nil
}

type locationVersionJoins[Q dialect.Joinable] struct {
	typ            string
	Location       modAs[Q, locationColumns]
	PrimaryVersion modAs[Q, locationColumns]
}

func (j locationVersionJoins[Q]) aliasedAs(alias string) locationVersionJoins[Q] {
	return buildLocationVersionJoins[Q](buildLocationVersionColumns(alias), j.typ)
}

func buildLocationVersionJoins[Q dialect.Joinable](cols locationVersionColumns, typ string) locationVersionJoins[Q] {
	return locationVersionJoins[Q]{
		typ: typ,
		Location: modAs[Q, locationColumns]{
			c: Locations.Columns,
			f: func(to locationColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Locations.Name().As(to.Alias())).On(
						to.ID.EQ(cols.LocationID),
					))
				}

				return mods
			},
		},
		PrimaryVersion: modAs[Q, locationColumns]{
			c: Locations.Columns,
			f: func(to locationColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Locations.Name().As(to.Alias())).On(
						to.ID.EQ(cols.LocationID),
						cols.IsPrimaryVersion.EQ(sqlite.Arg("`true`")),
					))
				}

				return mods
			},
		},
	}
}
