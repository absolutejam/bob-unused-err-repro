// Code generated by BobGen sql v0.40.2. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbinfo

import "github.com/aarondl/opt/null"

var Locations = Table[
	locationColumns,
	locationIndexes,
	locationForeignKeys,
	locationUniques,
	locationChecks,
]{
	Schema: "",
	Name:   "locations",
	Columns: locationColumns{
		ID: column{
			Name:      "id",
			DBType:    "BIGINT",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		PublicID: column{
			Name:      "public_id",
			DBType:    "VARCHAR(12)",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		CreatedAt: column{
			Name:      "created_at",
			DBType:    "DATETIME",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		UpdatedAt: column{
			Name:      "updated_at",
			DBType:    "DATETIME",
			Default:   "NULL",
			Comment:   "",
			Nullable:  true,
			Generated: false,
			AutoIncr:  false,
		},
		DeletedAt: column{
			Name:      "deleted_at",
			DBType:    "DATETIME",
			Default:   "NULL",
			Comment:   "",
			Nullable:  true,
			Generated: false,
			AutoIncr:  false,
		},
		Version: column{
			Name:      "version",
			DBType:    "INTEGER",
			Default:   "0",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
	},
	Indexes: locationIndexes{
		SqliteAutoindexLocations2: index{
			Type: "u",
			Name: "sqlite_autoindex_locations_2",
			Columns: []indexColumn{
				{
					Name:         "public_id",
					Desc:         null.FromCond(false, true),
					IsExpression: false,
				},
			},
			Unique:  true,
			Comment: "",
			Partial: false,
		},
		SqliteAutoindexLocations1: index{
			Type: "pk",
			Name: "sqlite_autoindex_locations_1",
			Columns: []indexColumn{
				{
					Name:         "id",
					Desc:         null.FromCond(false, true),
					IsExpression: false,
				},
			},
			Unique:  true,
			Comment: "",
			Partial: false,
		},
	},
	PrimaryKey: &constraint{
		Name:    "pk_main_locations",
		Columns: []string{"id"},
		Comment: "",
	},

	Uniques: locationUniques{
		SqliteAutoindexLocations2: constraint{
			Name:    "sqlite_autoindex_locations_2",
			Columns: []string{"public_id"},
			Comment: "",
		},
	},

	Comment: "",
}

type locationColumns struct {
	ID        column
	PublicID  column
	CreatedAt column
	UpdatedAt column
	DeletedAt column
	Version   column
}

func (c locationColumns) AsSlice() []column {
	return []column{
		c.ID, c.PublicID, c.CreatedAt, c.UpdatedAt, c.DeletedAt, c.Version,
	}
}

type locationIndexes struct {
	SqliteAutoindexLocations2 index
	SqliteAutoindexLocations1 index
}

func (i locationIndexes) AsSlice() []index {
	return []index{
		i.SqliteAutoindexLocations2, i.SqliteAutoindexLocations1,
	}
}

type locationForeignKeys struct{}

func (f locationForeignKeys) AsSlice() []foreignKey {
	return []foreignKey{}
}

type locationUniques struct {
	SqliteAutoindexLocations2 constraint
}

func (u locationUniques) AsSlice() []constraint {
	return []constraint{
		u.SqliteAutoindexLocations2,
	}
}

type locationChecks struct{}

func (c locationChecks) AsSlice() []check {
	return []check{}
}
