// Code generated by BobGen sql v0.40.2. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbinfo

import "github.com/aarondl/opt/null"

var LocationVersions = Table[
	locationVersionColumns,
	locationVersionIndexes,
	locationVersionForeignKeys,
	locationVersionUniques,
	locationVersionChecks,
]{
	Schema: "",
	Name:   "location_versions",
	Columns: locationVersionColumns{
		ID: column{
			Name:      "id",
			DBType:    "BIGINT",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		PublicID: column{
			Name:      "public_id",
			DBType:    "VARCHAR(12)",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		IsPrimaryVersion: column{
			Name:      "is_primary_version",
			DBType:    "BOOLEAN",
			Default:   "false",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		LocationID: column{
			Name:      "location_id",
			DBType:    "BIGINT",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		Name: column{
			Name:      "name",
			DBType:    "TEXT",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		Description: column{
			Name:      "description",
			DBType:    "TEXT",
			Default:   "NULL",
			Comment:   "",
			Nullable:  true,
			Generated: false,
			AutoIncr:  false,
		},
		Picture: column{
			Name:      "picture",
			DBType:    "TEXT",
			Default:   "NULL",
			Comment:   "",
			Nullable:  true,
			Generated: false,
			AutoIncr:  false,
		},
		CreatedAt: column{
			Name:      "created_at",
			DBType:    "DATETIME",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		UpdatedAt: column{
			Name:      "updated_at",
			DBType:    "DATETIME",
			Default:   "NULL",
			Comment:   "",
			Nullable:  true,
			Generated: false,
			AutoIncr:  false,
		},
		DeletedAt: column{
			Name:      "deleted_at",
			DBType:    "DATETIME",
			Default:   "NULL",
			Comment:   "",
			Nullable:  true,
			Generated: false,
			AutoIncr:  false,
		},
		Version: column{
			Name:      "version",
			DBType:    "INTEGER",
			Default:   "0",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
	},
	Indexes: locationVersionIndexes{
		SqliteAutoindexLocationVersions2: index{
			Type: "u",
			Name: "sqlite_autoindex_location_versions_2",
			Columns: []indexColumn{
				{
					Name:         "public_id",
					Desc:         null.FromCond(false, true),
					IsExpression: false,
				},
			},
			Unique:  true,
			Comment: "",
			Partial: false,
		},
		SqliteAutoindexLocationVersions1: index{
			Type: "pk",
			Name: "sqlite_autoindex_location_versions_1",
			Columns: []indexColumn{
				{
					Name:         "id",
					Desc:         null.FromCond(false, true),
					IsExpression: false,
				},
			},
			Unique:  true,
			Comment: "",
			Partial: false,
		},
	},
	PrimaryKey: &constraint{
		Name:    "pk_main_location_versions",
		Columns: []string{"id"},
		Comment: "",
	},
	ForeignKeys: locationVersionForeignKeys{
		FKLocationVersions0: foreignKey{
			constraint: constraint{
				Name:    "fk_location_versions_0",
				Columns: []string{"location_id"},
				Comment: "",
			},
			ForeignTable:   "locations",
			ForeignColumns: []string{"id"},
		},
	},
	Uniques: locationVersionUniques{
		SqliteAutoindexLocationVersions2: constraint{
			Name:    "sqlite_autoindex_location_versions_2",
			Columns: []string{"public_id"},
			Comment: "",
		},
	},

	Comment: "",
}

type locationVersionColumns struct {
	ID               column
	PublicID         column
	IsPrimaryVersion column
	LocationID       column
	Name             column
	Description      column
	Picture          column
	CreatedAt        column
	UpdatedAt        column
	DeletedAt        column
	Version          column
}

func (c locationVersionColumns) AsSlice() []column {
	return []column{
		c.ID, c.PublicID, c.IsPrimaryVersion, c.LocationID, c.Name, c.Description, c.Picture, c.CreatedAt, c.UpdatedAt, c.DeletedAt, c.Version,
	}
}

type locationVersionIndexes struct {
	SqliteAutoindexLocationVersions2 index
	SqliteAutoindexLocationVersions1 index
}

func (i locationVersionIndexes) AsSlice() []index {
	return []index{
		i.SqliteAutoindexLocationVersions2, i.SqliteAutoindexLocationVersions1,
	}
}

type locationVersionForeignKeys struct {
	FKLocationVersions0 foreignKey
}

func (f locationVersionForeignKeys) AsSlice() []foreignKey {
	return []foreignKey{
		f.FKLocationVersions0,
	}
}

type locationVersionUniques struct {
	SqliteAutoindexLocationVersions2 constraint
}

func (u locationVersionUniques) AsSlice() []constraint {
	return []constraint{
		u.SqliteAutoindexLocationVersions2,
	}
}

type locationVersionChecks struct{}

func (c locationVersionChecks) AsSlice() []check {
	return []check{}
}
