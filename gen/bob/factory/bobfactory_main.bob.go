// Code generated by BobGen sql v0.40.2. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"time"

	models "bob-repro/gen/bob/models"
	"github.com/aarondl/opt/null"
)

type Factory struct {
	baseLocationVersionMods LocationVersionModSlice
	baseLocationMods        LocationModSlice
}

func New() *Factory {
	return &Factory{}
}

func (f *Factory) NewLocationVersion(mods ...LocationVersionMod) *LocationVersionTemplate {
	return f.NewLocationVersionWithContext(context.Background(), mods...)
}

func (f *Factory) NewLocationVersionWithContext(ctx context.Context, mods ...LocationVersionMod) *LocationVersionTemplate {
	o := &LocationVersionTemplate{f: f}

	if f != nil {
		f.baseLocationVersionMods.Apply(ctx, o)
	}

	LocationVersionModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) FromExistingLocationVersion(m *models.LocationVersion) *LocationVersionTemplate {
	o := &LocationVersionTemplate{f: f, alreadyPersisted: true}

	o.ID = func() int64 { return m.ID }
	o.PublicID = func() string { return m.PublicID }
	o.IsPrimaryVersion = func() bool { return m.IsPrimaryVersion }
	o.LocationID = func() int64 { return m.LocationID }
	o.Name = func() string { return m.Name }
	o.Description = func() null.Val[string] { return m.Description }
	o.Picture = func() null.Val[string] { return m.Picture }
	o.CreatedAt = func() time.Time { return m.CreatedAt }
	o.UpdatedAt = func() null.Val[time.Time] { return m.UpdatedAt }
	o.DeletedAt = func() null.Val[time.Time] { return m.DeletedAt }
	o.Version = func() int32 { return m.Version }

	ctx := context.Background()
	if m.R.Location != nil {
		LocationVersionMods.WithExistingLocation(m.R.Location).Apply(ctx, o)
	}

	return o
}

func (f *Factory) NewLocation(mods ...LocationMod) *LocationTemplate {
	return f.NewLocationWithContext(context.Background(), mods...)
}

func (f *Factory) NewLocationWithContext(ctx context.Context, mods ...LocationMod) *LocationTemplate {
	o := &LocationTemplate{f: f}

	if f != nil {
		f.baseLocationMods.Apply(ctx, o)
	}

	LocationModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) FromExistingLocation(m *models.Location) *LocationTemplate {
	o := &LocationTemplate{f: f, alreadyPersisted: true}

	o.ID = func() int64 { return m.ID }
	o.PublicID = func() string { return m.PublicID }
	o.CreatedAt = func() time.Time { return m.CreatedAt }
	o.UpdatedAt = func() null.Val[time.Time] { return m.UpdatedAt }
	o.DeletedAt = func() null.Val[time.Time] { return m.DeletedAt }
	o.Version = func() int32 { return m.Version }

	ctx := context.Background()
	if len(m.R.LocationVersions) > 0 {
		LocationMods.AddExistingLocationVersions(m.R.LocationVersions...).Apply(ctx, o)
	}

	return o
}

func (f *Factory) ClearBaseLocationVersionMods() {
	f.baseLocationVersionMods = nil
}

func (f *Factory) AddBaseLocationVersionMod(mods ...LocationVersionMod) {
	f.baseLocationVersionMods = append(f.baseLocationVersionMods, mods...)
}

func (f *Factory) ClearBaseLocationMods() {
	f.baseLocationMods = nil
}

func (f *Factory) AddBaseLocationMod(mods ...LocationMod) {
	f.baseLocationMods = append(f.baseLocationMods, mods...)
}
