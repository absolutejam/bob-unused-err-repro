// Code generated by BobGen sql v0.40.2. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"testing"
	"time"

	models "bob-repro/gen/bob/models"
	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/jaswdr/faker/v2"
	"github.com/stephenafamo/bob"
)

type LocationVersionMod interface {
	Apply(context.Context, *LocationVersionTemplate)
}

type LocationVersionModFunc func(context.Context, *LocationVersionTemplate)

func (f LocationVersionModFunc) Apply(ctx context.Context, n *LocationVersionTemplate) {
	f(ctx, n)
}

type LocationVersionModSlice []LocationVersionMod

func (mods LocationVersionModSlice) Apply(ctx context.Context, n *LocationVersionTemplate) {
	for _, f := range mods {
		f.Apply(ctx, n)
	}
}

// LocationVersionTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type LocationVersionTemplate struct {
	ID               func() int64
	PublicID         func() string
	IsPrimaryVersion func() bool
	LocationID       func() int64
	Name             func() string
	Description      func() null.Val[string]
	Picture          func() null.Val[string]
	CreatedAt        func() time.Time
	UpdatedAt        func() null.Val[time.Time]
	DeletedAt        func() null.Val[time.Time]
	Version          func() int32

	r locationVersionR
	f *Factory

	alreadyPersisted bool
}

type locationVersionR struct {
	Location *locationVersionRLocationR
}

type locationVersionRLocationR struct {
	o *LocationTemplate
}

// Apply mods to the LocationVersionTemplate
func (o *LocationVersionTemplate) Apply(ctx context.Context, mods ...LocationVersionMod) {
	for _, mod := range mods {
		mod.Apply(ctx, o)
	}
}

// setModelRels creates and sets the relationships on *models.LocationVersion
// according to the relationships in the template. Nothing is inserted into the db
func (t LocationVersionTemplate) setModelRels(o *models.LocationVersion) {
	if t.r.Location != nil {
		rel := t.r.Location.o.Build()
		rel.R.LocationVersions = append(rel.R.LocationVersions, o)
		o.LocationID = rel.ID // h2
		o.R.Location = rel
	}
}

// BuildSetter returns an *models.LocationVersionSetter
// this does nothing with the relationship templates
func (o LocationVersionTemplate) BuildSetter() *models.LocationVersionSetter {
	m := &models.LocationVersionSetter{}

	if o.ID != nil {
		val := o.ID()
		m.ID = omit.From(val)
	}
	if o.PublicID != nil {
		val := o.PublicID()
		m.PublicID = omit.From(val)
	}
	if o.IsPrimaryVersion != nil {
		val := o.IsPrimaryVersion()
		m.IsPrimaryVersion = omit.From(val)
	}
	if o.LocationID != nil {
		val := o.LocationID()
		m.LocationID = omit.From(val)
	}
	if o.Name != nil {
		val := o.Name()
		m.Name = omit.From(val)
	}
	if o.Description != nil {
		val := o.Description()
		m.Description = omitnull.FromNull(val)
	}
	if o.Picture != nil {
		val := o.Picture()
		m.Picture = omitnull.FromNull(val)
	}
	if o.CreatedAt != nil {
		val := o.CreatedAt()
		m.CreatedAt = omit.From(val)
	}
	if o.UpdatedAt != nil {
		val := o.UpdatedAt()
		m.UpdatedAt = omitnull.FromNull(val)
	}
	if o.DeletedAt != nil {
		val := o.DeletedAt()
		m.DeletedAt = omitnull.FromNull(val)
	}
	if o.Version != nil {
		val := o.Version()
		m.Version = omit.From(val)
	}

	return m
}

// BuildManySetter returns an []*models.LocationVersionSetter
// this does nothing with the relationship templates
func (o LocationVersionTemplate) BuildManySetter(number int) []*models.LocationVersionSetter {
	m := make([]*models.LocationVersionSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.LocationVersion
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use LocationVersionTemplate.Create
func (o LocationVersionTemplate) Build() *models.LocationVersion {
	m := &models.LocationVersion{}

	if o.ID != nil {
		m.ID = o.ID()
	}
	if o.PublicID != nil {
		m.PublicID = o.PublicID()
	}
	if o.IsPrimaryVersion != nil {
		m.IsPrimaryVersion = o.IsPrimaryVersion()
	}
	if o.LocationID != nil {
		m.LocationID = o.LocationID()
	}
	if o.Name != nil {
		m.Name = o.Name()
	}
	if o.Description != nil {
		m.Description = o.Description()
	}
	if o.Picture != nil {
		m.Picture = o.Picture()
	}
	if o.CreatedAt != nil {
		m.CreatedAt = o.CreatedAt()
	}
	if o.UpdatedAt != nil {
		m.UpdatedAt = o.UpdatedAt()
	}
	if o.DeletedAt != nil {
		m.DeletedAt = o.DeletedAt()
	}
	if o.Version != nil {
		m.Version = o.Version()
	}

	o.setModelRels(m)

	return m
}

// BuildMany returns an models.LocationVersionSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use LocationVersionTemplate.CreateMany
func (o LocationVersionTemplate) BuildMany(number int) models.LocationVersionSlice {
	m := make(models.LocationVersionSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableLocationVersion(m *models.LocationVersionSetter) {
	if !(m.ID.IsValue()) {
		val := random_int64(nil)
		m.ID = omit.From(val)
	}
	if !(m.PublicID.IsValue()) {
		val := random_string(nil)
		m.PublicID = omit.From(val)
	}
	if !(m.LocationID.IsValue()) {
		val := random_int64(nil)
		m.LocationID = omit.From(val)
	}
	if !(m.Name.IsValue()) {
		val := random_string(nil)
		m.Name = omit.From(val)
	}
	if !(m.CreatedAt.IsValue()) {
		val := random_time_Time(nil)
		m.CreatedAt = omit.From(val)
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.LocationVersion
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *LocationVersionTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.LocationVersion) error {
	var err error

	return err
}

// Create builds a locationVersion and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *LocationVersionTemplate) Create(ctx context.Context, exec bob.Executor) (*models.LocationVersion, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableLocationVersion(opt)

	if o.r.Location == nil {
		LocationVersionMods.WithNewLocation().Apply(ctx, o)
	}

	var rel0 *models.Location

	if o.r.Location.o.alreadyPersisted {
		rel0 = o.r.Location.o.Build()
	} else {
		rel0, err = o.r.Location.o.Create(ctx, exec)
		if err != nil {
			return nil, err
		}
	}

	opt.LocationID = omit.From(rel0.ID)

	m, err := models.LocationVersions.Insert(opt).One(ctx, exec)
	if err != nil {
		return nil, err
	}

	m.R.Location = rel0

	if err := o.insertOptRels(ctx, exec, m); err != nil {
		return nil, err
	}
	return m, err
}

// MustCreate builds a locationVersion and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o *LocationVersionTemplate) MustCreate(ctx context.Context, exec bob.Executor) *models.LocationVersion {
	m, err := o.Create(ctx, exec)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateOrFail builds a locationVersion and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o *LocationVersionTemplate) CreateOrFail(ctx context.Context, tb testing.TB, exec bob.Executor) *models.LocationVersion {
	tb.Helper()
	m, err := o.Create(ctx, exec)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// CreateMany builds multiple locationVersions and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o LocationVersionTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.LocationVersionSlice, error) {
	var err error
	m := make(models.LocationVersionSlice, number)

	for i := range m {
		m[i], err = o.Create(ctx, exec)
		if err != nil {
			return nil, err
		}
	}

	return m, nil
}

// MustCreateMany builds multiple locationVersions and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o LocationVersionTemplate) MustCreateMany(ctx context.Context, exec bob.Executor, number int) models.LocationVersionSlice {
	m, err := o.CreateMany(ctx, exec, number)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateManyOrFail builds multiple locationVersions and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o LocationVersionTemplate) CreateManyOrFail(ctx context.Context, tb testing.TB, exec bob.Executor, number int) models.LocationVersionSlice {
	tb.Helper()
	m, err := o.CreateMany(ctx, exec, number)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// LocationVersion has methods that act as mods for the LocationVersionTemplate
var LocationVersionMods locationVersionMods

type locationVersionMods struct{}

func (m locationVersionMods) RandomizeAllColumns(f *faker.Faker) LocationVersionMod {
	return LocationVersionModSlice{
		LocationVersionMods.RandomID(f),
		LocationVersionMods.RandomPublicID(f),
		LocationVersionMods.RandomIsPrimaryVersion(f),
		LocationVersionMods.RandomLocationID(f),
		LocationVersionMods.RandomName(f),
		LocationVersionMods.RandomDescription(f),
		LocationVersionMods.RandomPicture(f),
		LocationVersionMods.RandomCreatedAt(f),
		LocationVersionMods.RandomUpdatedAt(f),
		LocationVersionMods.RandomDeletedAt(f),
		LocationVersionMods.RandomVersion(f),
	}
}

// Set the model columns to this value
func (m locationVersionMods) ID(val int64) LocationVersionMod {
	return LocationVersionModFunc(func(_ context.Context, o *LocationVersionTemplate) {
		o.ID = func() int64 { return val }
	})
}

// Set the Column from the function
func (m locationVersionMods) IDFunc(f func() int64) LocationVersionMod {
	return LocationVersionModFunc(func(_ context.Context, o *LocationVersionTemplate) {
		o.ID = f
	})
}

// Clear any values for the column
func (m locationVersionMods) UnsetID() LocationVersionMod {
	return LocationVersionModFunc(func(_ context.Context, o *LocationVersionTemplate) {
		o.ID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m locationVersionMods) RandomID(f *faker.Faker) LocationVersionMod {
	return LocationVersionModFunc(func(_ context.Context, o *LocationVersionTemplate) {
		o.ID = func() int64 {
			return random_int64(f)
		}
	})
}

// Set the model columns to this value
func (m locationVersionMods) PublicID(val string) LocationVersionMod {
	return LocationVersionModFunc(func(_ context.Context, o *LocationVersionTemplate) {
		o.PublicID = func() string { return val }
	})
}

// Set the Column from the function
func (m locationVersionMods) PublicIDFunc(f func() string) LocationVersionMod {
	return LocationVersionModFunc(func(_ context.Context, o *LocationVersionTemplate) {
		o.PublicID = f
	})
}

// Clear any values for the column
func (m locationVersionMods) UnsetPublicID() LocationVersionMod {
	return LocationVersionModFunc(func(_ context.Context, o *LocationVersionTemplate) {
		o.PublicID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m locationVersionMods) RandomPublicID(f *faker.Faker) LocationVersionMod {
	return LocationVersionModFunc(func(_ context.Context, o *LocationVersionTemplate) {
		o.PublicID = func() string {
			return random_string(f)
		}
	})
}

// Set the model columns to this value
func (m locationVersionMods) IsPrimaryVersion(val bool) LocationVersionMod {
	return LocationVersionModFunc(func(_ context.Context, o *LocationVersionTemplate) {
		o.IsPrimaryVersion = func() bool { return val }
	})
}

// Set the Column from the function
func (m locationVersionMods) IsPrimaryVersionFunc(f func() bool) LocationVersionMod {
	return LocationVersionModFunc(func(_ context.Context, o *LocationVersionTemplate) {
		o.IsPrimaryVersion = f
	})
}

// Clear any values for the column
func (m locationVersionMods) UnsetIsPrimaryVersion() LocationVersionMod {
	return LocationVersionModFunc(func(_ context.Context, o *LocationVersionTemplate) {
		o.IsPrimaryVersion = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m locationVersionMods) RandomIsPrimaryVersion(f *faker.Faker) LocationVersionMod {
	return LocationVersionModFunc(func(_ context.Context, o *LocationVersionTemplate) {
		o.IsPrimaryVersion = func() bool {
			return random_bool(f)
		}
	})
}

// Set the model columns to this value
func (m locationVersionMods) LocationID(val int64) LocationVersionMod {
	return LocationVersionModFunc(func(_ context.Context, o *LocationVersionTemplate) {
		o.LocationID = func() int64 { return val }
	})
}

// Set the Column from the function
func (m locationVersionMods) LocationIDFunc(f func() int64) LocationVersionMod {
	return LocationVersionModFunc(func(_ context.Context, o *LocationVersionTemplate) {
		o.LocationID = f
	})
}

// Clear any values for the column
func (m locationVersionMods) UnsetLocationID() LocationVersionMod {
	return LocationVersionModFunc(func(_ context.Context, o *LocationVersionTemplate) {
		o.LocationID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m locationVersionMods) RandomLocationID(f *faker.Faker) LocationVersionMod {
	return LocationVersionModFunc(func(_ context.Context, o *LocationVersionTemplate) {
		o.LocationID = func() int64 {
			return random_int64(f)
		}
	})
}

// Set the model columns to this value
func (m locationVersionMods) Name(val string) LocationVersionMod {
	return LocationVersionModFunc(func(_ context.Context, o *LocationVersionTemplate) {
		o.Name = func() string { return val }
	})
}

// Set the Column from the function
func (m locationVersionMods) NameFunc(f func() string) LocationVersionMod {
	return LocationVersionModFunc(func(_ context.Context, o *LocationVersionTemplate) {
		o.Name = f
	})
}

// Clear any values for the column
func (m locationVersionMods) UnsetName() LocationVersionMod {
	return LocationVersionModFunc(func(_ context.Context, o *LocationVersionTemplate) {
		o.Name = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m locationVersionMods) RandomName(f *faker.Faker) LocationVersionMod {
	return LocationVersionModFunc(func(_ context.Context, o *LocationVersionTemplate) {
		o.Name = func() string {
			return random_string(f)
		}
	})
}

// Set the model columns to this value
func (m locationVersionMods) Description(val null.Val[string]) LocationVersionMod {
	return LocationVersionModFunc(func(_ context.Context, o *LocationVersionTemplate) {
		o.Description = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m locationVersionMods) DescriptionFunc(f func() null.Val[string]) LocationVersionMod {
	return LocationVersionModFunc(func(_ context.Context, o *LocationVersionTemplate) {
		o.Description = f
	})
}

// Clear any values for the column
func (m locationVersionMods) UnsetDescription() LocationVersionMod {
	return LocationVersionModFunc(func(_ context.Context, o *LocationVersionTemplate) {
		o.Description = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m locationVersionMods) RandomDescription(f *faker.Faker) LocationVersionMod {
	return LocationVersionModFunc(func(_ context.Context, o *LocationVersionTemplate) {
		o.Description = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m locationVersionMods) RandomDescriptionNotNull(f *faker.Faker) LocationVersionMod {
	return LocationVersionModFunc(func(_ context.Context, o *LocationVersionTemplate) {
		o.Description = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m locationVersionMods) Picture(val null.Val[string]) LocationVersionMod {
	return LocationVersionModFunc(func(_ context.Context, o *LocationVersionTemplate) {
		o.Picture = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m locationVersionMods) PictureFunc(f func() null.Val[string]) LocationVersionMod {
	return LocationVersionModFunc(func(_ context.Context, o *LocationVersionTemplate) {
		o.Picture = f
	})
}

// Clear any values for the column
func (m locationVersionMods) UnsetPicture() LocationVersionMod {
	return LocationVersionModFunc(func(_ context.Context, o *LocationVersionTemplate) {
		o.Picture = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m locationVersionMods) RandomPicture(f *faker.Faker) LocationVersionMod {
	return LocationVersionModFunc(func(_ context.Context, o *LocationVersionTemplate) {
		o.Picture = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m locationVersionMods) RandomPictureNotNull(f *faker.Faker) LocationVersionMod {
	return LocationVersionModFunc(func(_ context.Context, o *LocationVersionTemplate) {
		o.Picture = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m locationVersionMods) CreatedAt(val time.Time) LocationVersionMod {
	return LocationVersionModFunc(func(_ context.Context, o *LocationVersionTemplate) {
		o.CreatedAt = func() time.Time { return val }
	})
}

// Set the Column from the function
func (m locationVersionMods) CreatedAtFunc(f func() time.Time) LocationVersionMod {
	return LocationVersionModFunc(func(_ context.Context, o *LocationVersionTemplate) {
		o.CreatedAt = f
	})
}

// Clear any values for the column
func (m locationVersionMods) UnsetCreatedAt() LocationVersionMod {
	return LocationVersionModFunc(func(_ context.Context, o *LocationVersionTemplate) {
		o.CreatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m locationVersionMods) RandomCreatedAt(f *faker.Faker) LocationVersionMod {
	return LocationVersionModFunc(func(_ context.Context, o *LocationVersionTemplate) {
		o.CreatedAt = func() time.Time {
			return random_time_Time(f)
		}
	})
}

// Set the model columns to this value
func (m locationVersionMods) UpdatedAt(val null.Val[time.Time]) LocationVersionMod {
	return LocationVersionModFunc(func(_ context.Context, o *LocationVersionTemplate) {
		o.UpdatedAt = func() null.Val[time.Time] { return val }
	})
}

// Set the Column from the function
func (m locationVersionMods) UpdatedAtFunc(f func() null.Val[time.Time]) LocationVersionMod {
	return LocationVersionModFunc(func(_ context.Context, o *LocationVersionTemplate) {
		o.UpdatedAt = f
	})
}

// Clear any values for the column
func (m locationVersionMods) UnsetUpdatedAt() LocationVersionMod {
	return LocationVersionModFunc(func(_ context.Context, o *LocationVersionTemplate) {
		o.UpdatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m locationVersionMods) RandomUpdatedAt(f *faker.Faker) LocationVersionMod {
	return LocationVersionModFunc(func(_ context.Context, o *LocationVersionTemplate) {
		o.UpdatedAt = func() null.Val[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m locationVersionMods) RandomUpdatedAtNotNull(f *faker.Faker) LocationVersionMod {
	return LocationVersionModFunc(func(_ context.Context, o *LocationVersionTemplate) {
		o.UpdatedAt = func() null.Val[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m locationVersionMods) DeletedAt(val null.Val[time.Time]) LocationVersionMod {
	return LocationVersionModFunc(func(_ context.Context, o *LocationVersionTemplate) {
		o.DeletedAt = func() null.Val[time.Time] { return val }
	})
}

// Set the Column from the function
func (m locationVersionMods) DeletedAtFunc(f func() null.Val[time.Time]) LocationVersionMod {
	return LocationVersionModFunc(func(_ context.Context, o *LocationVersionTemplate) {
		o.DeletedAt = f
	})
}

// Clear any values for the column
func (m locationVersionMods) UnsetDeletedAt() LocationVersionMod {
	return LocationVersionModFunc(func(_ context.Context, o *LocationVersionTemplate) {
		o.DeletedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m locationVersionMods) RandomDeletedAt(f *faker.Faker) LocationVersionMod {
	return LocationVersionModFunc(func(_ context.Context, o *LocationVersionTemplate) {
		o.DeletedAt = func() null.Val[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m locationVersionMods) RandomDeletedAtNotNull(f *faker.Faker) LocationVersionMod {
	return LocationVersionModFunc(func(_ context.Context, o *LocationVersionTemplate) {
		o.DeletedAt = func() null.Val[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m locationVersionMods) Version(val int32) LocationVersionMod {
	return LocationVersionModFunc(func(_ context.Context, o *LocationVersionTemplate) {
		o.Version = func() int32 { return val }
	})
}

// Set the Column from the function
func (m locationVersionMods) VersionFunc(f func() int32) LocationVersionMod {
	return LocationVersionModFunc(func(_ context.Context, o *LocationVersionTemplate) {
		o.Version = f
	})
}

// Clear any values for the column
func (m locationVersionMods) UnsetVersion() LocationVersionMod {
	return LocationVersionModFunc(func(_ context.Context, o *LocationVersionTemplate) {
		o.Version = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m locationVersionMods) RandomVersion(f *faker.Faker) LocationVersionMod {
	return LocationVersionModFunc(func(_ context.Context, o *LocationVersionTemplate) {
		o.Version = func() int32 {
			return random_int32(f)
		}
	})
}

func (m locationVersionMods) WithParentsCascading() LocationVersionMod {
	return LocationVersionModFunc(func(ctx context.Context, o *LocationVersionTemplate) {
		if isDone, _ := locationVersionWithParentsCascadingCtx.Value(ctx); isDone {
			return
		}
		ctx = locationVersionWithParentsCascadingCtx.WithValue(ctx, true)
		{

			related := o.f.NewLocationWithContext(ctx, LocationMods.WithParentsCascading())
			m.WithLocation(related).Apply(ctx, o)
		}
	})
}

func (m locationVersionMods) WithLocation(rel *LocationTemplate) LocationVersionMod {
	return LocationVersionModFunc(func(ctx context.Context, o *LocationVersionTemplate) {
		o.r.Location = &locationVersionRLocationR{
			o: rel,
		}
	})
}

func (m locationVersionMods) WithNewLocation(mods ...LocationMod) LocationVersionMod {
	return LocationVersionModFunc(func(ctx context.Context, o *LocationVersionTemplate) {
		related := o.f.NewLocationWithContext(ctx, mods...)

		m.WithLocation(related).Apply(ctx, o)
	})
}

func (m locationVersionMods) WithExistingLocation(em *models.Location) LocationVersionMod {
	return LocationVersionModFunc(func(ctx context.Context, o *LocationVersionTemplate) {
		o.r.Location = &locationVersionRLocationR{
			o: o.f.FromExistingLocation(em),
		}
	})
}

func (m locationVersionMods) WithoutLocation() LocationVersionMod {
	return LocationVersionModFunc(func(ctx context.Context, o *LocationVersionTemplate) {
		o.r.Location = nil
	})
}
