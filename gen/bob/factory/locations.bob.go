// Code generated by BobGen sql v0.40.2. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"testing"
	"time"

	models "bob-repro/gen/bob/models"
	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/jaswdr/faker/v2"
	"github.com/stephenafamo/bob"
)

type LocationMod interface {
	Apply(context.Context, *LocationTemplate)
}

type LocationModFunc func(context.Context, *LocationTemplate)

func (f LocationModFunc) Apply(ctx context.Context, n *LocationTemplate) {
	f(ctx, n)
}

type LocationModSlice []LocationMod

func (mods LocationModSlice) Apply(ctx context.Context, n *LocationTemplate) {
	for _, f := range mods {
		f.Apply(ctx, n)
	}
}

// LocationTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type LocationTemplate struct {
	ID        func() int64
	PublicID  func() string
	CreatedAt func() time.Time
	UpdatedAt func() null.Val[time.Time]
	DeletedAt func() null.Val[time.Time]
	Version   func() int32

	r locationR
	f *Factory

	alreadyPersisted bool
}

type locationR struct {
	LocationVersions []*locationRLocationVersionsR
}

type locationRLocationVersionsR struct {
	number int
	o      *LocationVersionTemplate
}

// Apply mods to the LocationTemplate
func (o *LocationTemplate) Apply(ctx context.Context, mods ...LocationMod) {
	for _, mod := range mods {
		mod.Apply(ctx, o)
	}
}

// setModelRels creates and sets the relationships on *models.Location
// according to the relationships in the template. Nothing is inserted into the db
func (t LocationTemplate) setModelRels(o *models.Location) {
	if t.r.LocationVersions != nil {
		rel := models.LocationVersionSlice{}
		for _, r := range t.r.LocationVersions {
			related := r.o.BuildMany(r.number)
			for _, rel := range related {
				rel.LocationID = o.ID // h2
				rel.R.Location = o
			}
			rel = append(rel, related...)
		}
		o.R.LocationVersions = rel
	}
}

// BuildSetter returns an *models.LocationSetter
// this does nothing with the relationship templates
func (o LocationTemplate) BuildSetter() *models.LocationSetter {
	m := &models.LocationSetter{}

	if o.ID != nil {
		val := o.ID()
		m.ID = omit.From(val)
	}
	if o.PublicID != nil {
		val := o.PublicID()
		m.PublicID = omit.From(val)
	}
	if o.CreatedAt != nil {
		val := o.CreatedAt()
		m.CreatedAt = omit.From(val)
	}
	if o.UpdatedAt != nil {
		val := o.UpdatedAt()
		m.UpdatedAt = omitnull.FromNull(val)
	}
	if o.DeletedAt != nil {
		val := o.DeletedAt()
		m.DeletedAt = omitnull.FromNull(val)
	}
	if o.Version != nil {
		val := o.Version()
		m.Version = omit.From(val)
	}

	return m
}

// BuildManySetter returns an []*models.LocationSetter
// this does nothing with the relationship templates
func (o LocationTemplate) BuildManySetter(number int) []*models.LocationSetter {
	m := make([]*models.LocationSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.Location
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use LocationTemplate.Create
func (o LocationTemplate) Build() *models.Location {
	m := &models.Location{}

	if o.ID != nil {
		m.ID = o.ID()
	}
	if o.PublicID != nil {
		m.PublicID = o.PublicID()
	}
	if o.CreatedAt != nil {
		m.CreatedAt = o.CreatedAt()
	}
	if o.UpdatedAt != nil {
		m.UpdatedAt = o.UpdatedAt()
	}
	if o.DeletedAt != nil {
		m.DeletedAt = o.DeletedAt()
	}
	if o.Version != nil {
		m.Version = o.Version()
	}

	o.setModelRels(m)

	return m
}

// BuildMany returns an models.LocationSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use LocationTemplate.CreateMany
func (o LocationTemplate) BuildMany(number int) models.LocationSlice {
	m := make(models.LocationSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableLocation(m *models.LocationSetter) {
	if !(m.ID.IsValue()) {
		val := random_int64(nil)
		m.ID = omit.From(val)
	}
	if !(m.PublicID.IsValue()) {
		val := random_string(nil)
		m.PublicID = omit.From(val)
	}
	if !(m.CreatedAt.IsValue()) {
		val := random_time_Time(nil)
		m.CreatedAt = omit.From(val)
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.Location
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *LocationTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.Location) error {
	var err error

	isLocationVersionsDone, _ := locationRelLocationVersionsCtx.Value(ctx)
	if !isLocationVersionsDone && o.r.LocationVersions != nil {
		ctx = locationRelLocationVersionsCtx.WithValue(ctx, true)
		for _, r := range o.r.LocationVersions {
			if r.o.alreadyPersisted {
				m.R.LocationVersions = append(m.R.LocationVersions, r.o.Build())
			} else {
				rel0, err := r.o.CreateMany(ctx, exec, r.number)
				if err != nil {
					return err
				}

				err = m.AttachLocationVersions(ctx, exec, rel0...)
				if err != nil {
					return err
				}
			}
		}
	}

	return err
}

// Create builds a location and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *LocationTemplate) Create(ctx context.Context, exec bob.Executor) (*models.Location, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableLocation(opt)

	m, err := models.Locations.Insert(opt).One(ctx, exec)
	if err != nil {
		return nil, err
	}

	if err := o.insertOptRels(ctx, exec, m); err != nil {
		return nil, err
	}
	return m, err
}

// MustCreate builds a location and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o *LocationTemplate) MustCreate(ctx context.Context, exec bob.Executor) *models.Location {
	m, err := o.Create(ctx, exec)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateOrFail builds a location and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o *LocationTemplate) CreateOrFail(ctx context.Context, tb testing.TB, exec bob.Executor) *models.Location {
	tb.Helper()
	m, err := o.Create(ctx, exec)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// CreateMany builds multiple locations and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o LocationTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.LocationSlice, error) {
	var err error
	m := make(models.LocationSlice, number)

	for i := range m {
		m[i], err = o.Create(ctx, exec)
		if err != nil {
			return nil, err
		}
	}

	return m, nil
}

// MustCreateMany builds multiple locations and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o LocationTemplate) MustCreateMany(ctx context.Context, exec bob.Executor, number int) models.LocationSlice {
	m, err := o.CreateMany(ctx, exec, number)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateManyOrFail builds multiple locations and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o LocationTemplate) CreateManyOrFail(ctx context.Context, tb testing.TB, exec bob.Executor, number int) models.LocationSlice {
	tb.Helper()
	m, err := o.CreateMany(ctx, exec, number)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// Location has methods that act as mods for the LocationTemplate
var LocationMods locationMods

type locationMods struct{}

func (m locationMods) RandomizeAllColumns(f *faker.Faker) LocationMod {
	return LocationModSlice{
		LocationMods.RandomID(f),
		LocationMods.RandomPublicID(f),
		LocationMods.RandomCreatedAt(f),
		LocationMods.RandomUpdatedAt(f),
		LocationMods.RandomDeletedAt(f),
		LocationMods.RandomVersion(f),
	}
}

// Set the model columns to this value
func (m locationMods) ID(val int64) LocationMod {
	return LocationModFunc(func(_ context.Context, o *LocationTemplate) {
		o.ID = func() int64 { return val }
	})
}

// Set the Column from the function
func (m locationMods) IDFunc(f func() int64) LocationMod {
	return LocationModFunc(func(_ context.Context, o *LocationTemplate) {
		o.ID = f
	})
}

// Clear any values for the column
func (m locationMods) UnsetID() LocationMod {
	return LocationModFunc(func(_ context.Context, o *LocationTemplate) {
		o.ID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m locationMods) RandomID(f *faker.Faker) LocationMod {
	return LocationModFunc(func(_ context.Context, o *LocationTemplate) {
		o.ID = func() int64 {
			return random_int64(f)
		}
	})
}

// Set the model columns to this value
func (m locationMods) PublicID(val string) LocationMod {
	return LocationModFunc(func(_ context.Context, o *LocationTemplate) {
		o.PublicID = func() string { return val }
	})
}

// Set the Column from the function
func (m locationMods) PublicIDFunc(f func() string) LocationMod {
	return LocationModFunc(func(_ context.Context, o *LocationTemplate) {
		o.PublicID = f
	})
}

// Clear any values for the column
func (m locationMods) UnsetPublicID() LocationMod {
	return LocationModFunc(func(_ context.Context, o *LocationTemplate) {
		o.PublicID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m locationMods) RandomPublicID(f *faker.Faker) LocationMod {
	return LocationModFunc(func(_ context.Context, o *LocationTemplate) {
		o.PublicID = func() string {
			return random_string(f)
		}
	})
}

// Set the model columns to this value
func (m locationMods) CreatedAt(val time.Time) LocationMod {
	return LocationModFunc(func(_ context.Context, o *LocationTemplate) {
		o.CreatedAt = func() time.Time { return val }
	})
}

// Set the Column from the function
func (m locationMods) CreatedAtFunc(f func() time.Time) LocationMod {
	return LocationModFunc(func(_ context.Context, o *LocationTemplate) {
		o.CreatedAt = f
	})
}

// Clear any values for the column
func (m locationMods) UnsetCreatedAt() LocationMod {
	return LocationModFunc(func(_ context.Context, o *LocationTemplate) {
		o.CreatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m locationMods) RandomCreatedAt(f *faker.Faker) LocationMod {
	return LocationModFunc(func(_ context.Context, o *LocationTemplate) {
		o.CreatedAt = func() time.Time {
			return random_time_Time(f)
		}
	})
}

// Set the model columns to this value
func (m locationMods) UpdatedAt(val null.Val[time.Time]) LocationMod {
	return LocationModFunc(func(_ context.Context, o *LocationTemplate) {
		o.UpdatedAt = func() null.Val[time.Time] { return val }
	})
}

// Set the Column from the function
func (m locationMods) UpdatedAtFunc(f func() null.Val[time.Time]) LocationMod {
	return LocationModFunc(func(_ context.Context, o *LocationTemplate) {
		o.UpdatedAt = f
	})
}

// Clear any values for the column
func (m locationMods) UnsetUpdatedAt() LocationMod {
	return LocationModFunc(func(_ context.Context, o *LocationTemplate) {
		o.UpdatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m locationMods) RandomUpdatedAt(f *faker.Faker) LocationMod {
	return LocationModFunc(func(_ context.Context, o *LocationTemplate) {
		o.UpdatedAt = func() null.Val[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m locationMods) RandomUpdatedAtNotNull(f *faker.Faker) LocationMod {
	return LocationModFunc(func(_ context.Context, o *LocationTemplate) {
		o.UpdatedAt = func() null.Val[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m locationMods) DeletedAt(val null.Val[time.Time]) LocationMod {
	return LocationModFunc(func(_ context.Context, o *LocationTemplate) {
		o.DeletedAt = func() null.Val[time.Time] { return val }
	})
}

// Set the Column from the function
func (m locationMods) DeletedAtFunc(f func() null.Val[time.Time]) LocationMod {
	return LocationModFunc(func(_ context.Context, o *LocationTemplate) {
		o.DeletedAt = f
	})
}

// Clear any values for the column
func (m locationMods) UnsetDeletedAt() LocationMod {
	return LocationModFunc(func(_ context.Context, o *LocationTemplate) {
		o.DeletedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m locationMods) RandomDeletedAt(f *faker.Faker) LocationMod {
	return LocationModFunc(func(_ context.Context, o *LocationTemplate) {
		o.DeletedAt = func() null.Val[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m locationMods) RandomDeletedAtNotNull(f *faker.Faker) LocationMod {
	return LocationModFunc(func(_ context.Context, o *LocationTemplate) {
		o.DeletedAt = func() null.Val[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m locationMods) Version(val int32) LocationMod {
	return LocationModFunc(func(_ context.Context, o *LocationTemplate) {
		o.Version = func() int32 { return val }
	})
}

// Set the Column from the function
func (m locationMods) VersionFunc(f func() int32) LocationMod {
	return LocationModFunc(func(_ context.Context, o *LocationTemplate) {
		o.Version = f
	})
}

// Clear any values for the column
func (m locationMods) UnsetVersion() LocationMod {
	return LocationModFunc(func(_ context.Context, o *LocationTemplate) {
		o.Version = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m locationMods) RandomVersion(f *faker.Faker) LocationMod {
	return LocationModFunc(func(_ context.Context, o *LocationTemplate) {
		o.Version = func() int32 {
			return random_int32(f)
		}
	})
}

func (m locationMods) WithParentsCascading() LocationMod {
	return LocationModFunc(func(ctx context.Context, o *LocationTemplate) {
		if isDone, _ := locationWithParentsCascadingCtx.Value(ctx); isDone {
			return
		}
		ctx = locationWithParentsCascadingCtx.WithValue(ctx, true)
	})
}

func (m locationMods) WithLocationVersions(number int, related *LocationVersionTemplate) LocationMod {
	return LocationModFunc(func(ctx context.Context, o *LocationTemplate) {
		o.r.LocationVersions = []*locationRLocationVersionsR{{
			number: number,
			o:      related,
		}}
	})
}

func (m locationMods) WithNewLocationVersions(number int, mods ...LocationVersionMod) LocationMod {
	return LocationModFunc(func(ctx context.Context, o *LocationTemplate) {
		related := o.f.NewLocationVersionWithContext(ctx, mods...)
		m.WithLocationVersions(number, related).Apply(ctx, o)
	})
}

func (m locationMods) AddLocationVersions(number int, related *LocationVersionTemplate) LocationMod {
	return LocationModFunc(func(ctx context.Context, o *LocationTemplate) {
		o.r.LocationVersions = append(o.r.LocationVersions, &locationRLocationVersionsR{
			number: number,
			o:      related,
		})
	})
}

func (m locationMods) AddNewLocationVersions(number int, mods ...LocationVersionMod) LocationMod {
	return LocationModFunc(func(ctx context.Context, o *LocationTemplate) {
		related := o.f.NewLocationVersionWithContext(ctx, mods...)
		m.AddLocationVersions(number, related).Apply(ctx, o)
	})
}

func (m locationMods) AddExistingLocationVersions(existingModels ...*models.LocationVersion) LocationMod {
	return LocationModFunc(func(ctx context.Context, o *LocationTemplate) {
		for _, em := range existingModels {
			o.r.LocationVersions = append(o.r.LocationVersions, &locationRLocationVersionsR{
				o: o.f.FromExistingLocationVersion(em),
			})
		}
	})
}

func (m locationMods) WithoutLocationVersions() LocationMod {
	return LocationModFunc(func(ctx context.Context, o *LocationTemplate) {
		o.r.LocationVersions = nil
	})
}
